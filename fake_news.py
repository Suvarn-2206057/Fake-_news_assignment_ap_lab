# -*- coding: utf-8 -*-
"""Fake_news.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/14IVrwoe5JfwWyaxJNyJNR5NNqk4sjdWe
"""

import numpy as np
import pandas as pd
import requests
from datetime import datetime
from sklearn.model_selection import train_test_split
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.linear_model import PassiveAggressiveClassifier
from sklearn.metrics import accuracy_score, confusion_matrix

# Load the dataset
df = pd.read_csv('news.csv')

# Get labels
labels = df.label

# Split the dataset
x_train, x_test, y_train, y_test = train_test_split(df['text'], labels, test_size=0.2, random_state=7)

# Initialize a TfidfVectorizer
tfidf_vectorizer = TfidfVectorizer(stop_words='english', max_df=0.7)

# Fit and transform train set, transform test set
tfidf_train = tfidf_vectorizer.fit_transform(x_train)
tfidf_test = tfidf_vectorizer.transform(x_test)

# Initialize a PassiveAggressiveClassifier
pac = PassiveAggressiveClassifier(max_iter=50)
pac.fit(tfidf_train, y_train)

# Predict on the test set and calculate accuracy
y_pred = pac.predict(tfidf_test)
score = accuracy_score(y_test, y_pred)
print(f'Accuracy: {round(score*100,2)}%')

# Build confusion matrix
print(confusion_matrix(y_test, y_pred, labels=['FAKE', 'REAL']))

def check_real_time_news(news_text):
    """Check real-time credibility of news by comparing it with latest news sources."""

    API_KEY = "014e2566318d4f1687f42501f5fa497a"
    query = news_text[:50]
    url = f"https://newsapi.org/v2/everything?q={query}&apiKey={API_KEY}"

    try:
        response = requests.get(url)
        data = response.json()

        if 'articles' in data and len(data['articles']) > 0:
            latest_news = data['articles'][0]
            published_time = latest_news.get('publishedAt', 'Unknown')
            title = latest_news.get('title', 'No title available')
            source = latest_news.get('source', {}).get('name', 'Unknown source')

            print(f"Latest News: {title}")
            print(f"Published At: {published_time}")
            print(f"Source: {source}")


            vectorized_text = tfidf_vectorizer.transform([news_text])
            model_prediction = pac.predict(vectorized_text)[0]

            return f"ML Prediction: {model_prediction}, Verified Source: {source}"

        else:
            return "No relevant news found in real-time sources."

    except Exception as e:
        return f"Error in fetching real-time news: {str(e)}"

news_to_check = "LA fire is spreading rapidly in downtown."
print(check_real_time_news(news_to_check))

news_to_check = "Indians Deported by Indian Air Force"
print(check_real_time_news(news_to_check))